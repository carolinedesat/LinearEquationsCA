/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author carol
 */
public class ListOfUsers extends javax.swing.JFrame {

    public void my_update(String str) {
        greeting.setText(str);
    }

    /**
     * Creates new form ListOfUsers
     */
    public ListOfUsers() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cancelBtn = new javax.swing.JButton();
        showUsersBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        list = new javax.swing.JList<>();
        deleteBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        usernameField = new javax.swing.JTextField();
        greeting = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setPreferredSize(new java.awt.Dimension(400, 300));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Linear Equations Calculator");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("List of Users");

        cancelBtn.setText("Cancel");
        cancelBtn.setPreferredSize(new java.awt.Dimension(150, 29));
        cancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnActionPerformed(evt);
            }
        });

        showUsersBtn.setText("Show users");
        showUsersBtn.setPreferredSize(new java.awt.Dimension(100, 29));
        showUsersBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showUsersBtnActionPerformed(evt);
            }
        });

        list.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = {};
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(list);

        deleteBtn.setText("Delete");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        jLabel3.setText("Enter username to delete:");

        usernameField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                usernameFieldKeyPressed(evt);
            }
        });

        greeting.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        greeting.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        greeting.setText("greeting");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(greeting, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(showUsersBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(deleteBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(cancelBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(usernameField)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(greeting)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(usernameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(showUsersBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancelBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteBtn))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 401, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 314, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed
        String str = greeting.getText();
        AdminMenu obj = new AdminMenu();
        obj.my_update(str);
        obj.setVisible(true);
        dispose();
    }//GEN-LAST:event_cancelBtnActionPerformed

    private void showUsersBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showUsersBtnActionPerformed

        //declares the list
        DefaultListModel DLM = new DefaultListModel();

        try {

            //loads the database driver
            Class.forName("com.mysql.cj.jdbc.Driver");

            //retrieves and stores the query
            String query = "SELECT * FROM user";

            //gets a connection to the database
            Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/users", "root", "*Dun04061620");

            //gets a statement from the connection
            PreparedStatement pst = conn.prepareStatement(query);

            //executes the query
            ResultSet rs = pst.executeQuery();

            //adds the usernames to the list
            while (rs.next()) {
                String username = rs.getString("username");
                DLM.addElement(username);
            }

            list.setModel(DLM);

        } catch (ClassNotFoundException | SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        }

    }//GEN-LAST:event_showUsersBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed

        //declares the list
        DefaultListModel DLM = new DefaultListModel();

        //stores the text field inside a variable
        String username = usernameField.getText();

        try {

            //loads the database driver
            Class.forName("com.mysql.cj.jdbc.Driver");

            //retrieves and stores the query
            String isAdmin = "SELECT * FROM user WHERE username=?";

            //gets a connection to the database
            Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/users", "root", "*Dun04061620");

            //gets a statement from the connection
            PreparedStatement pstIsAdmin = conn.prepareStatement(isAdmin);

            //passes the parameters
            pstIsAdmin.setString(1, username);

            //executes the query
            ResultSet rs = pstIsAdmin.executeQuery();

            //checks if the user is an admin; if yes, it can be delete; if not, it can
            if (rs.next()) {
                if (null != rs.getString("is_admin")) {

                    JOptionPane.showMessageDialog(null, "Admin cannot be removed!");

                } else {

                    //stores the user id inside a variable
                    int user_id = rs.getInt("user_id");

                    //retrieves and stores the query
                    String deletePK = "DELETE FROM user WHERE user_id=?";
                    String deleteFK = "DELETE FROM operations WHERE user_id=?";
                    String deleteUser = "DELETE FROM user WHERE username=?";

                    //gets a statement from the connection
                    PreparedStatement pstDelete1 = conn.prepareStatement(deletePK);
                    PreparedStatement pstDelete2 = conn.prepareStatement(deletePK);
                    PreparedStatement pstDelete3 = conn.prepareStatement(deleteUser);

                    //deletes primary key from table user
                    pstDelete1.setInt(1, user_id);
                    pstDelete1.execute();

                    //deletes foreign key from table operations
                    pstDelete2.setInt(1, user_id);
                    pstDelete2.execute();

                    //deletes user from table user
                    pstDelete3.setString(1, username);
                    pstDelete3.execute();
                    JOptionPane.showMessageDialog(null, "User deleted with success!");

                    //clears the table and username field
                    DLM.clear();
                    usernameField.setText("");

                    list.setModel(DLM);

                }

            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }

    }//GEN-LAST:event_deleteBtnActionPerformed

    private void usernameFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_usernameFieldKeyPressed

        //declares the list
        DefaultListModel DLM = new DefaultListModel();

        //stores the text field inside a variable
        String username = usernameField.getText();

        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {

            try {

                //loads the database driver
                Class.forName("com.mysql.cj.jdbc.Driver");

                //retrieves and stores the query
                String isAdmin = "SELECT * FROM user WHERE username=?";

                //gets a connection to the database
                Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/users", "root", "*Dun04061620");

                //gets a statement from the connection
                PreparedStatement pstIsAdmin = conn.prepareStatement(isAdmin);

                //passes the parameters
                pstIsAdmin.setString(1, username);

                //executes the query
                ResultSet rs = pstIsAdmin.executeQuery();

                //checks if the user is an admin; if yes, it can be delete; if not, it can
                if (rs.next()) {
                    if (null != rs.getString("is_admin")) {

                        JOptionPane.showMessageDialog(null, "Admin cannot be removed!");

                    } else {

                        //stores the user id inside a variable
                        int user_id = rs.getInt("user_id");

                        //retrieves and stores the query
                        String deleteFK = "DELETE FROM operations WHERE user_id=?";
                        String deleteUser = "DELETE FROM user WHERE username=?";

                        //gets a statement from the connection
                        PreparedStatement pstDelete1 = conn.prepareStatement(deleteFK);

                        //deletes foreign key from table operations
                        pstDelete1.setInt(1, user_id);
                        pstDelete1.execute();

                        //gets a statement from the connection
                        PreparedStatement pstDelete2 = conn.prepareStatement(deleteUser);

                        //deletes user from table user
                        pstDelete2.setString(1, username);
                        pstDelete2.execute();
                        JOptionPane.showMessageDialog(null, "User deleted with success!");

                        //clears the table and username field
                        DLM.clear();
                        usernameField.setText("");

                        list.setModel(DLM);

                    }

                }

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }

        }

    }//GEN-LAST:event_usernameFieldKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ListOfUsers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ListOfUsers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ListOfUsers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ListOfUsers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ListOfUsers().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelBtn;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JLabel greeting;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> list;
    private javax.swing.JButton showUsersBtn;
    private javax.swing.JTextField usernameField;
    // End of variables declaration//GEN-END:variables
}
